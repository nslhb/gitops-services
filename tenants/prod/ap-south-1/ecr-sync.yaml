apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ecr-credentials-sync
  namespace: flux-system
spec:
  suspend: false
  schedule: 0 */6 * * *
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: devops
          restartPolicy: Never
          volumes:
            - name: token
              emptyDir:
                medium: Memory
          initContainers:
            - image: amazon/aws-cli:2.2.12
              name: get-token
              imagePullPolicy: IfNotPresent
              env:
                - name: REGION
                  value: ap-south-1
              volumeMounts:
                - mountPath: /token
                  name: token
              command:
                - /bin/sh
                - -ce
                - aws ecr get-login-password --region ${REGION} > /token/ecr-token
          containers:
            - image: bitnami/kubectl:latest
              name: create-secret
              imagePullPolicy: IfNotPresent
              env:
                - name: SECRET_NAME
                  value: ecr-credentials
                - name: ECR_REGISTRY
                  value: 660124699787.dkr.ecr.ap-south-1.amazonaws.com
              volumeMounts:
                - mountPath: /token
                  name: token
              command:
                - /bin/bash
                - -ce
                - |-
                  for namespace in paas tf ava-nlg taas
                  do
                    kubectl delete secret --ignore-not-found $SECRET_NAME
                    kubectl create secret docker-registry $SECRET_NAME \
                      --docker-server="$ECR_REGISTRY" \
                      --docker-username=AWS \
                      --docker-password="$(</token/ecr-token)"
                    kubectl delete secret --ignore-not-found $SECRET_NAME -n $namespace
                    kubectl create secret docker-registry $SECRET_NAME -n $namespace\
                      --docker-server="$ECR_REGISTRY" \
                      --docker-username=AWS \
                      --docker-password="$(</token/ecr-token)"
                  done
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: false
                readOnlyRootFilesystem: true
          nodeSelector:
            kubernetes.io/arch: amd64
          tolerations:
            - operator: Exists