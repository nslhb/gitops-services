apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: services
  region: ap-south-1
  version: "1.20"

vpc:
  id: "vpc-0e0ccffca59ba6525"
  cidr: "10.8.0.0/16"
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  subnets:
    private:
      ap-south-1a:
        id: "subnet-00f7e0ce61b65419a"
        cidr: "10.8.0.0/19"
      ap-south-1b:
        id: "subnet-0b2d5546b6ed22566"
        cidr: "10.8.64.0/19"
    public:
      ap-south-1a:
        id: "subnet-048d248e611b48e23"
        cidr: "10.8.216.0/21"
      ap-south-1b:
        id: "subnet-0a3f7abd03caf8e2e"
        cidr: "10.8.224.0/21"

iam:
  withOIDC: true
  fargatePodExecutionRolePermissionsBoundary: arn:aws:iam::832807087073:policy/Default-Boundary-Policy
  serviceAccounts:
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      roleName: load-balancer-ap-south-1
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: external-dns
        namespace: kube-system
      roleName: external-dns-ap-south-1
      wellKnownPolicies:
        externalDNS: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
      roleName: cluster-autoscaler-ap-south-1
      wellKnownPolicies:
        autoScaler: true
    - metadata:
        name: grafana
        namespace: monitoring
        labels: { aws-usage: "application" }
      attachPolicy:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: "arn:aws:iam::*:role/CloudWatch-CrossAccountSharing*"
      roleName: nsl-grafana
    - metadata:
        name: ebs-csi-driver
        namespace: kube-system
      roleName: ebs-csi-driver-ap-south-1
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: ci
        namespace: ci
      roleName: action-runner
      attachPolicy:
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:ListSecrets
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Resource:
            - "arn:aws:secretsmanager:ap-south-1:832807087073:secret:github-private-key-NKaEyf"
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - "arn:aws:s3:::nsl-artifacts"
              - "arn:aws:s3:::nsl-artifacts/*"
    - metadata:
        name: terraform-sync-workspace
        namespace: ci
      roleName: terraform
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
nodeGroups:
  - name: system-120
    instanceType: "t3a.large"
    desiredCapacity: 1
    minSize: 1
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: 97f38a15-a525-49d6-beb7-7e768066c762
    privateNetworking: true
    amiFamily: Bottlerocket
    ami: auto-ssm
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::832807087073:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::832807087073:role/EKS-Default-SSM-AD-Role
    labels:
      workload: system
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/workload: system
      k8s.io/cluster-autoscaler/node-template/taint/CriticalAddonsOnly: NoSchedule
    taints:
      CriticalAddonsOnly: "true:NoSchedule"
    ssh:
      allow: true
      publicKeyName: bottlerocketkey
  - name: monitoring-120
    instancesDistribution:
      maxPrice: 0.030
      instanceTypes: [ "r3.large","r4.large", "r5ad.large", "r5d.large", "r5a.large" ]
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: "capacity-optimized-prioritized"
    desiredCapacity: 1
    minSize: 0
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: 97f38a15-a525-49d6-beb7-7e768066c762
    privateNetworking: true
    amiFamily: Bottlerocket
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::832807087073:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::832807087073:role/EKS-Default-SSM-AD-Role
    labels:
      workload: monitoring
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/workload: monitoring
      k8s.io/cluster-autoscaler/node-template/taint/monitoring: NoSchedule
    taints:
      monitoring: "true:NoSchedule"
  - name: linkerd-120
    instanceType: "t3a.medium"
    desiredCapacity: 1
    minSize: 0
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: 97f38a15-a525-49d6-beb7-7e768066c762
    privateNetworking: true
    amiFamily: Bottlerocket
    ami: auto-ssm
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::832807087073:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::832807087073:role/EKS-Default-SSM-AD-Role
    labels:
      part-of: Linkerd
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/part-of: Linkerd
      k8s.io/cluster-autoscaler/node-template/taint/linkerd: NoSchedule
    taints:
      linkerd: "true:NoSchedule"
  - name: edge-120
    instancesDistribution:
      maxPrice: 0.13
      instanceTypes: [ "t3a.2xlarge","t3.2xlarge", "m5a.2xlarge", "m5.2xlarge", "m5ad.2xlarge" ]
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: "capacity-optimized-prioritized"
    desiredCapacity: 1
    minSize: 0
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: 97f38a15-a525-49d6-beb7-7e768066c762
    privateNetworking: true
    amiFamily: Bottlerocket
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::832807087073:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::832807087073:role/EKS-Default-SSM-AD-Role
    labels:
      workload: public
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/workload: public
      k8s.io/cluster-autoscaler/node-template/taint/Edge: NoSchedule
    taints:
      Edge: "true:NoSchedule"

cloudWatch:
  clusterLogging:
    enableTypes: [ "authenticator" ]

addons:
  - name: vpc-cni