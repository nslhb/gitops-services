apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: dev
  region: ap-south-1
  version: "1.20"

vpc:
  id: "vpc-003978caf25a1d7ce"
  cidr: "10.100.0.0/16"
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  subnets:
    private:
      ap-south-1a:
        id: "subnet-090c9cf2f159f2cd2"
        cidr: "10.100.0.0/19"
      ap-south-1b:
        id: "subnet-0c1ee00495e8fa8e2"
        cidr: "10.100.64.0/19"
#      ap-south-1c:
#        id: "subnet-014228877d6c932a6"
#        cidr: "10.100.128.0/19"
    public:
      ap-south-1a:
        id: "subnet-03ad4d9406c822c9b"
        cidr: "10.100.216.0/21"
      ap-south-1b:
        id: "subnet-0ea11e9a3ea1bf0a4"
        cidr: "10.100.224.0/21"
#      ap-south-1c:
#        id: "subnet-0ca9b2d007b987baf"
#        cidr: "10.100.232.0/21"
iam:
  withOIDC: true
  fargatePodExecutionRolePermissionsBoundary: arn:aws:iam::755502957828:policy/Default-Boundary-Policy
  serviceAccounts:
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      roleName: load-balancer-ap-south-1
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: external-dns
        namespace: kube-system
      roleName: external-dns-ap-south-1
      wellKnownPolicies:
        externalDNS: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
      roleName: cluster-autoscaler-ap-south-1
      wellKnownPolicies:
        autoScaler: true
    - metadata:
        name: ebs-csi-driver
        namespace: kube-system
      roleName: ebs-csi-driver-ap-south-1
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: terraform-sync-workspace
        namespace: kube-system
      roleName: terraform
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AdministratorAccess"

nodeGroups:
  - name: system-120-2
    instanceType: "a1.xlarge"
    desiredCapacity: 1
    minSize: 1
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: a3456af4-c4de-4938-837d-86d5615d75d7
    privateNetworking: true
    amiFamily: Bottlerocket
    ami: auto-ssm
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::755502957828:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::755502957828:role/EKS-Default-SSM-AD-Role
    labels:
      workload: system
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/workload: system
      k8s.io/cluster-autoscaler/node-template/taint/CriticalAddonsOnly: NoSchedule
    taints:
      CriticalAddonsOnly: "true:NoSchedule"
  - name: monitoring-120-2
    instancesDistribution:
      maxPrice: 0.2
      instanceTypes: [ "r6g.xlarge", "m6g.xlarge",  "t4g.xlarge" ]
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: "capacity-optimized-prioritized"
    desiredCapacity: 1
    minSize: 0
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: a3456af4-c4de-4938-837d-86d5615d75d7
    privateNetworking: true
    amiFamily: Bottlerocket
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::755502957828:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::755502957828:role/EKS-Default-SSM-AD-Role
    labels:
      workload: monitoring
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/workload: monitoring
      k8s.io/cluster-autoscaler/node-template/taint/monitoring: NoSchedule
    taints:
      monitoring: "true:NoSchedule"
  - name: linkerd-120-2
    instancesDistribution:
      maxPrice: 0.05
      instanceTypes: [ "t4g.large","a1.xlarge", "c6g.large", "m6g.large" ]
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: "capacity-optimized-prioritized"
    desiredCapacity: 1
    minSize: 0
    maxSize: 3
    volumeType: gp3
    volumeSize: 10
    volumeEncrypted: true
    volumeKmsKeyID: a3456af4-c4de-4938-837d-86d5615d75d7
    privateNetworking: true
    amiFamily: Bottlerocket
    ami: auto-ssm
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::755502957828:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::755502957828:role/EKS-Default-SSM-AD-Role
    labels:
      part-of: Linkerd
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/part-of: Linkerd
      k8s.io/cluster-autoscaler/node-template/taint/linkerd: NoSchedule
    taints:
      linkerd: "true:NoSchedule"
  - name: common-120-2
    instancesDistribution:
      maxPrice: 0.28
      instanceTypes: [ "c4.4xlarge","c5.4xlarge", "c5a.4xlarge", "c5n.4xlarge", "m5a.4xlarge", "m5.4xlarge" ]
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: "capacity-optimized-prioritized"
    desiredCapacity: 3
    minSize: 0
    maxSize: 20
    volumeType: gp3
    volumeSize: 50
    volumeEncrypted: true
    volumeKmsKeyID: a3456af4-c4de-4938-837d-86d5615d75d7
    privateNetworking: true
    amiFamily: Bottlerocket
    disableIMDSv1: true
    iam:
      instanceProfileARN: arn:aws:iam::755502957828:instance-profile/EKS-Default-SSM-AD-Role-ip
      instanceRoleARN: arn:aws:iam::755502957828:role/EKS-Default-SSM-AD-Role
    labels:
      workload: public
      eks.amazonaws.com/compute-type: ec2
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/services: "owned"
      k8s.io/cluster-autoscaler/node-template/label/workload: public

cloudWatch:
  clusterLogging:
    enableTypes: [ "authenticator" ]

addons:
  - name: vpc-cni
    version: latest
