apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus-adapter
  namespace: flux-system
spec:
  interval: 10m0s
  releaseName: prometheus-adapter
  serviceAccountName: devops
  targetNamespace: monitoring
  chart:
    spec:
      chart: prometheus-adapter
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  values:
    replicas: 2
    resources:
      limits:
        cpu: 100m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    tolerations:
      - key: monitoring
        operator: Exists
    prometheus:
      url: "http://prometheus-operated.monitoring.svc.cluster.local"
    psp:
      create: true
    nodeSelector:
      workload: monitoring
    rules:
      external:
        - seriesQuery: 'response_total{namespace!="",pod!=""}'
          resources:
            template: <<.Resource>>
          name:
            matches: "^(.*)_total$"
            as: "${1}_per_second"
          metricsQuery: |-
            sum(
              irate(
                <<.Series>>{
                  <<.LabelMatchers>>,
                  direction="inbound"
                }[5m]
              )
            ) by (
              <<.GroupBy>>
            )
      custom:
        - seriesQuery: 'response_latency_ms_bucket{namespace!="",pod!=""}'
          resources:
            template: <<.Resource>>
          name:
            matches: ^(.*)_bucket$
            as: "${1}_50th"
          metricsQuery: histogram_quantile(0.50, sum(irate(<<.Series>>{<<.LabelMatchers>>, direction="inbound"}[5m])) by (le, <<.GroupBy>>))

        - seriesQuery: 'response_latency_ms_bucket{namespace!="",pod!=""}'
          resources:
            template: <<.Resource>>
          name:
            matches: ^(.*)_bucket$
            as: "${1}_95th"
          metricsQuery: histogram_quantile(0.95, sum(irate(<<.Series>>{<<.LabelMatchers>>, direction="inbound"}[5m])) by (le, <<.GroupBy>>))

        - seriesQuery: 'response_latency_ms_bucket{namespace!="",pod!=""}'
          resources:
            template: <<.Resource>>
          name:
            matches: ^(.*)_bucket$
            as: "${1}_99th"
          metricsQuery: histogram_quantile(0.99, sum(irate(<<.Series>>{<<.LabelMatchers>>, direction="inbound"}[5m])) by (le, <<.GroupBy>>))
      resource:
        cpu:
          containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
          nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[1m])) by (<<.GroupBy>>)
          resources:
            overrides:
              node:
                resource: node
              namespace:
                resource: namespace
              pod:
                resource: pod
          containerLabel: container
        memory:
          containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
          nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
          resources:
            overrides:
              node:
                resource: node
              namespace:
                resource: namespace
              pod:
                resource: pod
          containerLabel: container
        window: 1m